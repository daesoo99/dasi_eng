{
  "permissions": {
    "allow": [
      "Bash(git --version)",
      "Bash(gh:*)",
      "Bash(mkdir:*)",
      "Bash(git init:*)",
      "Bash(git remote add:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(npm install:*)",
      "Bash(npm run dev:*)",
      "Bash(ls:*)",
      "Bash(pkill:*)",
      "Bash(true)",
      "Bash(curl:*)",
      "Bash(git pull:*)",
      "Bash(cp:*)",
      "Bash(rm:*)",
      "Bash(flutter:*)",
      "Bash(powershell:*)",
      "Bash(git clone:*)",
      "Bash(C:flutterbinflutter doctor)",
      "Bash(git rm:*)",
      "Bash(cmd /c:*)",
      "Bash(echo $PATH)",
      "Bash(nvm:*)",
      "Bash(timeout 10 npm start)",
      "Bash(timeout 5 npm start:*)",
      "Bash(npm uninstall:*)",
      "Bash(timeout 3 npm start)",
      "Bash(npm start)",
      "Bash(set PORT=3001)",
      "Bash(./gradlew signingReport)",
      "Bash(dir flutter_app)",
      "Bash(.gradlew.bat signingReport)",
      "Bash(keytool:*)",
      "Bash(C:flutterbinflutter create flutter_app)",
      "Bash(tmux new-session:*)",
      "Bash(where:*)",
      "Bash(uv tool install:*)",
      "Bash(claude-monitor)",
      "Bash(copy:*)",
      "Bash(node:*)",
      "Bash(set PORT=3002)",
      "Bash(set PORT=3003)",
      "Bash(npm:*)",
      "Bash(taskkill:*)",
      "Bash(touch:*)",
      "Bash($env:PORT=8081)",
      "Bash(set PORT=3012)",
      "Bash(set PORT=8081)",
      "Bash(set PORT=3000)",
      "Bash(set PORT=3013)",
      "Bash(set PORT=3016)",
      "Bash($env:PORT=3016)",
      "Bash(react-scripts:*)",
      "Bash(PORT=3016 npm start)",
      "Bash(PORT=3017 react-scripts:*)",
      "Bash(PORT=3017 npx react-scripts start)",
      "Bash(PORT=3018 npx react-scripts start)",
      "Bash(set PORT=8082)",
      "Bash(dir)",
      "Bash(tasklist:*)",
      "Bash(npx react-scripts:*)",
      "Bash(wmic process where:*)",
      "Bash(npx tailwindcss init:*)",
      "Bash(firebase --version)",
      "Bash(firebase login:*)",
      "Bash(firebase use:*)",
      "Bash(ren:*)",
      "Bash(for f in *.ts)",
      "Bash(do mv \"$f\" \"$f%.ts.js\")",
      "Bash(done)",
      "Bash(firebase deploy:*)",
      "Bash(dir:*)",
      "Bash(python:*)",
      "WebFetch(domain:gist.github.com)",
      "WebFetch(domain:gist.githubusercontent.com)",
      "Bash(start:*)",
      "Bash(timeout:*)",
      "Bash(find:*)",
      "Bash(git restore:*)",
      "Bash(git reset:*)",
      "Bash(git checkout:*)",
      "Bash(set PORT=8080)",
      "Bash(PORT=8080 npm start)",
      "Bash(PORT=8081 npm start)",
      "Bash(PORT=8083 npm start)",
      "Bash(npx vite build:*)",
      "Bash(PORT=8083 timeout 10 npm start)",
      "Bash(set PORT=8084)",
      "Bash(FIREBASE_SERVICE_ACCOUNT_PATH=./firebase-service-account.json node ../scripts/upsertCurriculum.js 4 revised ../data/l4_meta.json ../patterns/level_4_advanced_expressions/lv4_stage_system_REVISED.json)",
      "WebFetch(domain:localhost)",
      "Bash(grep:*)",
      "Bash(PORT=3016 npm run dev)",
      "Bash(npx tsc:*)",
      "Bash(PORT=4002 npm run dev)",
      "Bash(npx vite:*)",
      "Bash(del /f package-lock.json)",
      "Bash(FIREBASE_SERVICE_ACCOUNT_PATH=./firebase-service-account.json node -e \"\nconst admin = require(''firebase-admin'');\nconst serviceAccount = require(''./firebase-service-account.json'');\n\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount)\n});\n\nconst db = admin.firestore();\n\nasync function updateFirestoreMeta() {\n  try {\n    const levelMeta = {\n      ''1'': { ''delaySec'': 3, ''randomize'': false, ''minCAA'': 4 },\n      ''2'': { ''delaySec'': 2, ''randomize'': false, ''minCAA'': 5 },\n      ''3'': { ''delaySec'': 1, ''randomize'': true, ''minCAA'': 5 },\n      ''4'': { ''delaySec'': 1, ''randomize'': true, ''minCAA'': 6 },\n      ''5'': { ''delaySec'': 1, ''randomize'': true, ''minCAA'': 6 },\n      ''6'': { ''delaySec'': 1, ''randomize'': true, ''minCAA'': 6 }\n    };\n\n    await db.collection(''meta'').doc(''engineConfig'').set({\n      levelMeta: levelMeta,\n      errorTaxonomy: [\n        ''BE-COP'', ''DO-AUX'', ''TENSE-PAST'', ''TENSE-PERF'', \n        ''MODAL'', ''PREP'', ''DET-ART'', ''QUANT'', ''COMP-SUP'', \n        ''CLAUSE-IF'', ''DISCOURSE'', ''PRON-PROS''\n      ],\n      lastUpdated: admin.firestore.FieldValue.serverTimestamp(),\n      version: ''2.0''\n    }, { merge: true });\n\n    console.log(''✅ Firestore meta updated with levelMeta and errorTaxonomy'');\n    process.exit(0);\n  } catch (error) {\n    console.error(''❌ Error:'', error);\n    process.exit(1);\n  }\n}\n\nupdateFirestoreMeta();\n\")",
      "Bash(patterns/level_3_advanced_grammar/seeds)",
      "Bash(PORT=8090 npm start)",
      "Bash(PORT=8086 npm start)",
      "Bash(git remote remove:*)",
      "Bash(PORT=3500 npm run dev)",
      "Bash(xcopy:*)",
      "Bash(del:*)",
      "Bash(move *_completion_report.md archive_completed_work )",
      "Bash(move PROGRESS_DASHBOARD*.md archive_completed_work )",
      "Bash(move batch_specs_*.json archive_completed_work )",
      "Bash(move *_autofix.js archive_completed_work )",
      "Bash(move banks_*.json archive_completed_work )",
      "Bash(move test_*.js archive_completed_work )",
      "Bash(move upsert_*.js archive_completed_work )",
      "Bash(move expand_*.js archive_completed_work )",
      "Bash(move *_expanded.json archive_completed_work )",
      "Bash(move basic_patterns_extracted.json archive_completed_work )",
      "Bash(move qa_samples.json archive_completed_work )",
      "Bash(move quality_report.json archive_completed_work )",
      "Bash(move patch_engine_metadata.js archive_completed_work )",
      "Bash(move l3_final_stage.json archive_completed_work)",
      "Bash(for file in Lv1-P1-S01_bank.json Lv1-P1-S02_bank.json Lv1-P1-S03_bank.json Lv1-P1-S04_bank.json)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(for:*)",
      "Bash(do touch \"C:\\Users\\kimdaesoo\\source\\claude\\DaSi_eng\\web_app\\public\\patterns\\banks\\level_9\\Lv9-M$i_bank.json\")",
      "Bash(echo \"Creating snapshot in: $snapshot_dir\")",
      "Bash(zip:*)",
      "Bash(do if [ -d \"$path\" ])",
      "Bash(then echo \"Found: $path\")",
      "Bash(du:*)",
      "Bash(else echo \"Not found: $path\")",
      "Bash(fi)",
      "WebSearch",
      "Bash(if [ -d \"patterns_backup_20250823\" ])",
      "Bash(then echo \"Found patterns_backup_20250823\")",
      "Bash(else echo \"Not found patterns_backup_20250823\")",
      "Bash(tar:*)",
      "Bash(PORT=8088 timeout 10 npm run dev)",
      "Bash(PORT=8089 timeout 15 npm run dev)",
      "Bash(PORT=8089 timeout 10 npm run dev:*)",
      "Bash(PORT=8090 npm run dev)",
      "Bash(BASE_URL=http://localhost:8090 node test_monitoring.js)",
      "Bash(docker:*)",
      "Bash(PORT=8082 timeout 10 npm run dev:*)",
      "Bash(PORT=8082 timeout 15 npm run dev)",
      "Bash(cat:*)",
      "Bash(npx husky init:*)",
      "Bash(make:*)",
      "Bash(PORT=8081 timeout 15s npm start)",
      "Bash(git tag:*)",
      "Bash(echo \"Creating backup in: $BACKUP_DIR\")",
      "Bash(BACKUP_DIR=\"backups/v2.1.0-structure-backup-20250828-100531\")",
      "Bash(echo:*)"
    ],
    "deny": [],
    "additionalDirectories": [
      "C:\\c\\Users\\kimdaesoo\\source\\claude\\DaSi_eng",
      "C:\\c\\Users\\kimdaesoo\\source\\claude"
    ]
  }
}